<?php
/*
 * $Id$
 */
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Edit course settings
 *
 * @package    moodlecore
 * @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

global $PAGE,$DB,$OUTPUT, $CFG;

require_once('../../config.php');
require_once($CFG->libdir.'/formslib.php');
require_once('extends_course.php');
require_once($CFG->dirroot.'/local/f2_support/lib.php');
require_once($CFG->dirroot.'/f2_lib/core.php');
// require_once('lib.php');

$courseid         = required_param('courseid', PARAM_INT);       		  // course id
$saved         = optional_param('saved', false, PARAM_BOOL);

/*
 *    if ($id == SITEID){
        // don't allow editing of  'site course' using this from
        print_error('cannoteditsiteform');
    }
 * 
 */

$baseurl = new moodle_url($CFG->wwwroot.'/local/f2_course/modello_questionario.php', array('courseid'=>$courseid));

$PAGE->set_pagelayout('admin');
$PAGE->set_url($baseurl);

// first create the form
class course_modello_questionario extends moodleform {
    private $feedbackdata;

    public function definition() {
        $this->feedbackdata = new stdClass();
        //this function can not be called, because not all data are available at this time
        //I use set_form_elements instead
    }

    //this function set the data used in set_form_elements()
    //in this form the only value have to set is course
    //eg: array('course' => $course)
    public function set_feedbackdata($data) {
        if (is_array($data)) {
            foreach ($data as $key => $val) {
                $this->feedbackdata->{$key} = $val;
            }
        }
    }

    //here the elements will be set
    //this function have to be called manually
    //the advantage is that the data are already set
    public function set_form_elements() {
        $mform =& $this->_form;

        $elementgroup = array();
        //headline
        $mform->addElement('header', '', get_string('using_templates', 'feedback'));
        // hidden elements
        $mform->addElement('hidden', 'id');
        $mform->setType('id', PARAM_INT);

        // visible elements
        $templates_options = array();
        $owntemplates = feedback_get_template_list($this->feedbackdata->course, 'own');
        $publictemplates = feedback_get_template_list($this->feedbackdata->course, 'public');
        
        $modello_questionario = $this->feedbackdata->modello_questionario;
        
        $mform->addElement('hidden', 'modello_questionario', $modello_questionario);
        $mform->setType('modello_questionario', PARAM_INT);

        $options = array();
        if ($owntemplates or $publictemplates) {
            $options[''] = array('' => get_string('choose'));

            if ($owntemplates) {
                $courseoptions = array();
                foreach ($owntemplates as $template) {
                    $courseoptions[$template->id] = $template->name;
                }
                $options[get_string('course')] = $courseoptions;
            }

            if ($publictemplates) {
                $publicoptions = array();
                foreach ($publictemplates as $template) {
                    $publicoptions[$template->id] = $template->name;
                }
                $options[get_string('public', 'feedback')] = $publicoptions;
            }

            $attributes = 'onChange="this.form.submit()"';
            $elementgroup[] =& $mform->createElement('selectgroups',
                                                     'templateid',
                                                     '',
                                                     $options,
                                                     $attributes);

            $elementgroup[] =& $mform->createElement('submit',
                                                     'use_template',
                                                     get_string('use_this_template', 'feedback'));

            $mform->addGroup($elementgroup, 'elementgroup', '', array(' '), false);
        } else {
            $mform->addElement('static', 'info', get_string('no_templates_available_yet', 'feedback'));
        }
    }
}

$PAGE->navbar->add(get_string('custom_modello_questionario','local_f2_course'));
$title = get_string('title_modello_questionario','local_f2_course');

$PAGE->set_context(get_context_instance(CONTEXT_SYSTEM));
$PAGE->set_title($title);
$PAGE->set_heading($title);

echo $OUTPUT->header();

$test = new extends_f2_course($courseid);
$test->print_tab_edit_course('modello_questionario');

echo $OUTPUT->heading($title);

$feedback_module_id = $DB->get_field('modules', 'id', array('name' => 'feedback'));
$feedback_id = $DB->get_field('feedback', 'id', array('course' => $courseid, 'anonymous' => 1)); // il questionario anonimo è quello studenti, cioè quello che interessa a noi

if (!$feedback_id) {
    echo $OUTPUT->box(get_string('anagcoursenotyetcreated', 'local_f2_course'), 'generalbox boxwidthnormal boxaligncenter');
    echo $OUTPUT->footer();
}

if (! $cm = $DB->get_record("course_modules", array('instance'=>$feedback_id, 'module' => $feedback_module_id))) {
    print_error('invalidcoursemodule');
}

if (! $course = $DB->get_record("course", array("id"=>$cm->course))) {
    print_error('coursemisconf');
}

if (! $feedback = $DB->get_record("feedback", array("id"=>$cm->instance))) {
    print_error('invalidcoursemodule');
}

if (!$context = get_context_instance(CONTEXT_MODULE, $cm->id)) {
        print_error('badcontext');
}

require_login();

require_capability('mod/feedback:edititems', $context);

//the use_template-form
$use_template_form = new course_modello_questionario(new moodle_url('/mod/feedback/use_templ.php?'));
$use_template_form->set_feedbackdata(array('course' => $course, 'modello_questionario' => $courseid));
$use_template_form->set_form_elements();
$use_template_form->set_data(array('id'=>$cm->id));

if ($saved)
    echo $OUTPUT->notification(get_string('changessaved'), 'notifysuccess');

$template = $DB->get_field('feedback_item', 'label', array('feedback' => $feedback_id, 'typ' => 'info'));

echo '<br />';
echo '<br />';
echo $OUTPUT->box('Attualmente è in uso il seguente modello di questionario: '.$template, 'generalbox boxwidthnormal boxaligncenter');
echo '<br />';

$use_template_form->display();

echo $OUTPUT->footer();

