<?php
require_once($CFG->libdir.'/formslib.php');

class hierarchyrestore_pickfile_form extends moodleform {

    function definition() {
        global $CFG;

        $mform =& $this->_form;
        $filelist = $this->_customdata['filelist'];

        // action for next page
        $mform->addElement('hidden','action','selectoptions');
        $mform->setType('action', PARAM_TEXT);

        if(count($filelist) == 1) {
            // only one file available
            $file = array_shift($filelist);
            $mform->addElement('hidden', 'file', $file);
            $mform->setType('file', PARAM_TEXT);
            $mform->addElement('html', '<p>' . get_string('pickfileone', 'local_f2_domains', $file) . '</p>');
            $mform->addElement('html','<p>' . get_string('pickfilehelp','local_f2_domains', "$CFG->dataroot/hierarchies") . '</p>');
        } else if (count($filelist) > 0) {
            // multiple possible files - choose with select box
            $mform->addElement('html', get_string('pickfilehelp', 'local_f2_domains', "$CFG->dataroot/hierarchies"));
            $mform->addElement('select', 'file', get_string('pickfilemultiple','local_f2_domains'), $filelist);
        }
        $this->add_action_buttons(false, get_string('continue'));

    }
}

class hierarchyrestore_chooseitems_form extends moodleform {

    // this form uses the array generated by get_backup_contents() to decide
    // which options to display. See that function for info on format of array

    function definition() {
        $mform =& $this->_form;
        $contents = $this->_customdata['contents'];

        // action for next page
        $mform->addElement('hidden','action','confirm');
        $mform->setType('action', PARAM_TEXT);

//        // general hierarchy restore options go here
//        // TODO if no options other than usercount, only show header if section required
//        $mform->addElement('header', 'hierarchyrestore', get_string('hierarchyrestore','local_f2_domains'));
//        if($contents->options->usercount > 0) {
//            $mform->addElement('static','usercount', '', get_string('restoreusers', 'local_f2_domains',$contents->options->usercount));
//            $mform->addElement('selectyesno','inc_users', get_string('restoreusersanddata','local_f2_domains'));
//        }
//        else {
//            $mform->addElement('static','usercount', '', get_string('restorenousers', 'local_f2_domains'));
//        }
        $hierarchies = get_backup_list();
        $i = 0;
        foreach ($hierarchies as $hname) {
            $i++;
            if(!isset($contents->$hname)) {
                // This happens if an installation has hierarchy types installed
                // but the zip file doesn't contain data for that type.
                // TODO put in as a developer debug message?
                //print "Hierarchy $hname not found in zip";
                continue;
            }

            $mform->addElement('header', $hname.'restore', get_string($hname, 'local_f2_domains').' '.get_string('restore','local_f2_domains'));
            $mform->addElement('static','message',get_string('selectframeworks','local_f2_domains'),'');
            $this->add_checkbox_controller($i,'',array(),1);
            foreach ($contents->$hname->frameworks AS $fwid => $framework) {
                $itemcount = $framework->itemcount;
                $fwname = $framework->fullname;
                $label = "$fwname ($itemcount ".get_string("{$hname}plural",'local_f2_domains').")";
                $mform->addElement('advcheckbox',"hierarchy[$hname][$fwid]", '', $label, array('group'=>$i));
                $mform->setDefault("hierarchy[$hname][$fwid]",1);
            }

//            if(isset($contents->$hname->options)) {
//                $options = $contents->$hname->options;
//                $mform->addElement('header', $hname.'restoreoptions',
//                    get_string($hname, 'local_f2_domains').' '.
//                    get_string('restore','local_f2_domains').' '.
//                    get_string('additionaloptions', 'local_f2_domains'));
//                foreach ($options AS $opname => $option) {
//                    if ($option->exists) {
//                        $mform->addElement('selectyesno',"options[$hname][$opname]", $option->label);
//                        $mform->setDefault("options[$hname][$opname]", $option->default);
//                        // matching options go here?
//                    }
//                }
//            }
            $mform->addElement('hidden','backup_unique_code',$contents->backup_unique_code);
            $mform->setType('backup_unique_code', PARAM_TEXT);

        }
        $this->add_action_buttons(true,get_string('continue'));
    }



}
