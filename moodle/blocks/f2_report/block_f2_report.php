<?php
//$Id$
/**
 *  f2_report block class
 *
 *  Extends standard block methods, and defines methods for display,
 *  validation and processing of the form.
 *
 */

require_once 'lib.php';

class block_f2_report extends block_list {

	/**
	 * Stores the student record during validation and processing
	 *
	 * @var object
	 */
	public $student;
	/**
	 * Stores the event start timestamp during validation and processing
	 *
	 * @var object
	 */
	public $timestamp;

	/**
	 * Standard block init method, defines the title
	 */
	public function init() {
		$this->title = get_string('pluginname','block_f2_report');
	}

	/**
	 * Prevent multiple instances of the block on a page
	 * @return boolean
	 */
	public function allow_multiple() {
		return false;
	}

	/**
	 * Cron job, sends reminder texts once a day
	 *
	 * Runs every hour with block's cron job, but only does anything between 8am and 9am (so
	 * once a day).  Looks for any appoinments happening today, and if there's a valid mobile
	 * number for the student, sends them a reminder via SMS.
	 */
	public function cron() {
	}

	public function get_content() {
		global $USER,$CFG;
		if ($this->content !== null) {
			return $this->content;
		}

                $blockid = $this->instance->id;
                
		$this->content         = new stdClass;
		$this->content->items  = array();
		$this->content->icons  = array();
		$this->content->footer = '';
		
// 		print_r(prenotazioni_aperte());
		if (isloggedin()) 
		{   // Show the block
			//if(has_capability('block/f2_report:viewreport',get_context_instance(CONTEXT_BLOCK, $blockid)))
			if(has_capability('block/f2_report:viewreport', context_block::instance($blockid)))
			{
				if ((isReferenteDiDirezione($USER->id))
						or (isReferenteDiSettore($USER->id))
						or (isSupervisore($USER->id)))
				{
// 				if (prenotazioni_dip_aperte())
// 				{
					$this->content->items[] = html_writer::tag('a', get_string('report_quantificazione','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/report_pentaho.php'));
                                        $this->content->items[] = html_writer::tag('a', get_string('report_statistici','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/report_statistici.php'));
                                        $this->content->items[] = html_writer::tag('a', get_string('report_form_ind','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/report_form_ind.php'));
                                        $this->content->items[] = html_writer::tag('a', get_string('report_on_line','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/online/report_on_line.php'));
                                        $this->content->items[] = html_writer::tag('a', get_string('report_questionari','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/report_questionari.php'));
                                        $this->content->items[] = html_writer::tag('a', get_string('report_partecipazione','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/report_partecipazione.php'));
					//$this->content->icons[] = '';
				if (isSupervisore($USER->id))
				{
					$this->content->items[] = html_writer::tag('a', get_string('consuntivi_annuali','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/consuntivi_annuali.php'));
				}
				$this->content->items[] = html_writer::tag('a', get_string('iscrizione_massiva','block_f2_report'), array('href' => $CFG->wwwroot.'/blocks/f2_report/iscrizione_massiva.php'));
				$this->content->icons[] = '';
// 				}
				}
			}
		}
		// Add more list items here

		return $this->content;
	}
	/**
	 * Restricts block to course pages
	 *
	 * @see blocks/block_base#applicable_formats()
	 * @return array
	 */
	function applicable_formats() {
		return array('all' => true);
	}
	/**
	 * Formats the error messages as HTML.
	 *
	 * @param $errors error messages generated by {@see validate_form()}
	 */
	function display_errors($errors) {
		$this->content->text .= html_writer::start_tag('div', array('class' => "errors"));
		foreach ($errors as $error) {
			$this->content->text .= $error.html_writer::empty_tag('br');
		}
		$this->content->text .= html_writer::end_tag('div');
	}
}


